@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function divisable($number, $base: $base-font-size, $columns: $grid-columns) {
  $multiplier: strip-unit($base) * $columns;
  $max: (floor(strip-unit($number) / $columns) * $multiplier) / strip-unit($base) * 1em;
  @return if($max !=0, $max, null);
}

// https://css-tricks.com/snippets/sass/power-function/
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: $value / $number;
    }
  }

  @return $value;
}

// Bulma fucntions

@function colorLuminance($color) {
  $color-rgb: (
    "red": red($color),
    "green": green($color),
    "blue": blue($color)
  );

  @each $name, $value in $color-rgb {
    $adjusted: 0;
    $value: $value / 255;
    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + 0.055) / 1.055;
      $value: pow($value, 2);
    }
    $color-rgb: map-merge(
      $color-rgb,
      (
        $name: $value
      )
    );
  }
  @return (map-get($color-rgb, "red") * 0.2126) + (map-get($color-rgb, "green") * 0.7152) +
    (map-get($color-rgb, "blue") * 0.0722);
}

@function findColorInvert($color) {
  @if (colorLuminance($color) > 0.55) {
    @return rgba(#000, 0.7);
  } @else {
    @return #fff;
  }
}
