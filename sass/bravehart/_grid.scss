@mixin make-row($gutter: $grid-gutter) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter;
  margin-left: -$gutter;
}

@mixin make-container($gutter: $grid-gutter) {
  margin: auto;
  position: relative;
  padding-right: $gutter;
  padding-left: $gutter;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

@mixin make-fix-col($size) {
  flex: 0 0 percentage($size / 100);
  max-width: percentage($size / 100);
}

@mixin make-gap($count: 8, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include up($breakpoint, $breakpoints) {
      @for $i from 0 through $count {
        &.gap#{$infix}-#{$i} {
          [class^="col"],
          [class^=" col"],
          [class^="col-"],
          [class*=" col-"] {
            padding-right: ($grid-gutter/$count) * $i;
            padding-left: ($grid-gutter/$count) * $i;
          }
        }
      }
    }
  }
}

@mixin make-grid-containers($gutter: $grid-gutter, $breakpoints: $grid-breakpoints) {
  %container {
    margin: auto;
    position: relative;
    padding-right: $gutter;
    padding-left: $gutter;
  }

  .container-full {
    max-width: 100%;
    @extend %container;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    $min: map-get($breakpoints, $breakpoint);
    $max: divisable($min);

    .container#{$infix} {
      max-width: $max;
      @extend %container;
    }

    @include up($breakpoint, $breakpoints) {
      .container {
        max-width: $max;
      }
    }
  }
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    //
    // APPLY BASE
    //
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    //
    // FIFTHS GRID
    //
    .col#{$infix}-fifths {
      @extend %grid-column;
    }

    //
    // RESPONSIVE GRID
    //
    @include up($breakpoint, $breakpoints) {
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%;
      }

      //
      // STANDARD GRID
      //
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      //
      // FIFTHS GRID
      //
      .col#{$infix}-fifths {
        @include make-fix-col(20);
      }

      //
      // PERCENTAGE GRID
      //
      @if $enable-percentage-grid {
        $step: 5;

        @for $i from 1 through ceil(100 / $step) {
          $value: $i * $step;

          .col#{$infix}_#{$value} {
            @include make-fix-col($value);
          }
        }
      }

      //
      // GRID ORDER
      //
      .order#{$infix}-first {
        order: -1;
      }

      .order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} {
          order: $i;
        }
      }
    }
  }
}

@if $enable-grid-classes {
  @include make-grid-columns();
  @include make-grid-containers();

  .row {
    @include make-row();
    @include make-gap();
  }

  [class^="col"],
  [class^=" col"],
  [class^="col-"],
  [class*=" col-"] {
    &.gap-0 {
      padding-left: 0;
      padding-right: 0;
    }
  }
}
